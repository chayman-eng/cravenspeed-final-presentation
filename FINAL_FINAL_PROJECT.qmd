---
title: "CravenSpeed Profit Prediction"
format: html
execute: 
  echo: true
  warning: false
  message: false
---

```{r setup}
library(tidyverse)
library(caret)
library(xgboost)
library(Matrix)
library(skimr)
library(broom)
```

```{r}
craven_train <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/refs/heads/master/dat/craven_train.rds")))
colnames(craven_train)
```
```{r}
skim(craven_train)
```

```{r}
library(tidyverse)
library(caret)
library(Metrics)

engineer <- function(df) {
  df %>%
    filter(
      !is.na(`Units Sold`), `Units Sold` > 0,
      !is.na(`Revenue 2019 to present`), `Revenue 2019 to present` > 0
    ) %>%
    mutate(
      Profit = `Revenue 2019 to present` - `BOM Cost` * `Units Sold`,
      log_units_sold = log1p(`Units Sold`),
      retail_bom_ratio = retailPrice / (`BOM Cost` + 1),
      revenue_per_component = `Revenue 2019 to present` / (`Number of Components` + 1),
      log_units_components = log1p(`Units Sold`) * `Number of Components`,
      bom_weight_interaction = `BOM Cost` * `Unit Weight (pounds)`,
      material_numeric = as.numeric(as.factor(`Main Component Material`)),
      price_weight_interaction = retailPrice * `Unit Weight (pounds)`,
      revenue_per_unit = `Revenue 2019 to present` / `Units Sold`,
      true_profit_margin = (`Revenue 2019 to present` - `BOM Cost` * `Units Sold`) / `Revenue 2019 to present`,
      component_cost_ratio = `BOM Cost` / (`Number of Components` + 1)
    ) %>%
    select(
      Profit,
      log_units_sold,
      retail_bom_ratio,
      revenue_per_component,
      log_units_components,
      bom_weight_interaction,
      material_numeric,
      price_weight_interaction,
      revenue_per_unit,
      true_profit_margin,
      component_cost_ratio
    ) %>%
    drop_na()
}
```


```{r}
skim(ds)
```


```{r}
ds <- engineer(craven_train)

lm_model <- lm(Profit ~ ., data = ds)

summary(lm_model)

set.seed(505)
train_control <- trainControl(method = "cv", number = 1465)
cv_lm <- train(Profit ~ ., data = ds, method = "lm", trControl = train_control)

print(cv_lm)
```

```{r}
library(broom)

lm_model <- lm(Profit ~ ., data = ds)

tidy_lm <- tidy(lm_model)

tidy_lm %>%
  arrange(p.value)
```

